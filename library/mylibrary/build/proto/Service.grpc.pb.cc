// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Service.proto

#include "Service.pb.h"
#include "Service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Utilities {

static const char* Connection_method_names[] = {
  "/Utilities.Connection/CheckUptime",
  "/Utilities.Connection/CheckTemperature",
};

std::unique_ptr< Connection::Stub> Connection::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Connection::Stub> stub(new Connection::Stub(channel));
  return stub;
}

Connection::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CheckUptime_(Connection_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckTemperature_(Connection_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Connection::Stub::CheckUptime(::grpc::ClientContext* context, const ::Utilities::CheckUptimeRequest& request, ::Utilities::CheckUptimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckUptime_, context, request, response);
}

void Connection::Stub::experimental_async::CheckUptime(::grpc::ClientContext* context, const ::Utilities::CheckUptimeRequest* request, ::Utilities::CheckUptimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckUptime_, context, request, response, std::move(f));
}

void Connection::Stub::experimental_async::CheckUptime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Utilities::CheckUptimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckUptime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Utilities::CheckUptimeResponse>* Connection::Stub::AsyncCheckUptimeRaw(::grpc::ClientContext* context, const ::Utilities::CheckUptimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Utilities::CheckUptimeResponse>::Create(channel_.get(), cq, rpcmethod_CheckUptime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Utilities::CheckUptimeResponse>* Connection::Stub::PrepareAsyncCheckUptimeRaw(::grpc::ClientContext* context, const ::Utilities::CheckUptimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Utilities::CheckUptimeResponse>::Create(channel_.get(), cq, rpcmethod_CheckUptime_, context, request, false);
}

::grpc::Status Connection::Stub::CheckTemperature(::grpc::ClientContext* context, const ::Utilities::CheckTemperatureRequest& request, ::Utilities::CheckTemperatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckTemperature_, context, request, response);
}

void Connection::Stub::experimental_async::CheckTemperature(::grpc::ClientContext* context, const ::Utilities::CheckTemperatureRequest* request, ::Utilities::CheckTemperatureResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckTemperature_, context, request, response, std::move(f));
}

void Connection::Stub::experimental_async::CheckTemperature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Utilities::CheckTemperatureResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckTemperature_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Utilities::CheckTemperatureResponse>* Connection::Stub::AsyncCheckTemperatureRaw(::grpc::ClientContext* context, const ::Utilities::CheckTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Utilities::CheckTemperatureResponse>::Create(channel_.get(), cq, rpcmethod_CheckTemperature_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Utilities::CheckTemperatureResponse>* Connection::Stub::PrepareAsyncCheckTemperatureRaw(::grpc::ClientContext* context, const ::Utilities::CheckTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Utilities::CheckTemperatureResponse>::Create(channel_.get(), cq, rpcmethod_CheckTemperature_, context, request, false);
}

Connection::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Connection_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Connection::Service, ::Utilities::CheckUptimeRequest, ::Utilities::CheckUptimeResponse>(
          std::mem_fn(&Connection::Service::CheckUptime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Connection_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Connection::Service, ::Utilities::CheckTemperatureRequest, ::Utilities::CheckTemperatureResponse>(
          std::mem_fn(&Connection::Service::CheckTemperature), this)));
}

Connection::Service::~Service() {
}

::grpc::Status Connection::Service::CheckUptime(::grpc::ServerContext* context, const ::Utilities::CheckUptimeRequest* request, ::Utilities::CheckUptimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Connection::Service::CheckTemperature(::grpc::ServerContext* context, const ::Utilities::CheckTemperatureRequest* request, ::Utilities::CheckTemperatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Utilities

